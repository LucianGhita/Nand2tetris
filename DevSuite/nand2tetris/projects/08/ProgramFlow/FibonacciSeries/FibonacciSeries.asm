//push argument 1
@2
D=M
@1
D=D+A
A=D
D=M
@0
A=M
M=D
@0
M=M+1
//pop pointer 1
@0
M=M-1
A=M
D=M
@4
M=D
//push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
//pop that 0
@0
D=A
@4
D=D+M
@R13
M=D
@0
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
//pop that 1
@1
D=A
@4
D=D+M
@R13
M=D
@0
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@2
D=M
@0
D=D+A
A=D
D=M
@0
A=M
M=D
@0
M=M+1
//push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
//sub
@0
M=M-1
A=M
D=M
@0
M=M-1
A=M
M=M-D
@0
M=M+1
//pop argument 0
@0
D=A
@2
D=D+M
@R13
M=D
@0
M=M-1
A=M
D=M
@R13
A=M
M=D
//C_LABEL MAIN_LOOP_START
(MAIN_LOOP_START)
//push argument 0
@2
D=M
@0
D=D+A
A=D
D=M
@0
A=M
M=D
@0
M=M+1
//C_IF COMPUTE_ELEMENT
@0
M=M-1
A=M
D=M
@COMPUTE_ELEMENT
D;JGT
D;JLT
//C_GOTO END_PROGRAM
@END_PROGRAM
0;JMP
//C_LABEL COMPUTE_ELEMENT
(COMPUTE_ELEMENT)
//push that 0
@4
D=M
@0
D=D+A
A=D
D=M
@0
A=M
M=D
@0
M=M+1
//push that 1
@4
D=M
@1
D=D+A
A=D
D=M
@0
A=M
M=D
@0
M=M+1
//add
@0
M=M-1
A=M
D=M
@0
M=M-1
A=M
M=D+M
@0
M=M+1
//pop that 2
@2
D=A
@4
D=D+M
@R13
M=D
@0
M=M-1
A=M
D=M
@R13
A=M
M=D
//push pointer 1
@4
D=M
@0
A=M
M=D
@0
M=M+1
//push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
//add
@0
M=M-1
A=M
D=M
@0
M=M-1
A=M
M=D+M
@0
M=M+1
//pop pointer 1
@0
M=M-1
A=M
D=M
@4
M=D
//push argument 0
@2
D=M
@0
D=D+A
A=D
D=M
@0
A=M
M=D
@0
M=M+1
//push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
//sub
@0
M=M-1
A=M
D=M
@0
M=M-1
A=M
M=M-D
@0
M=M+1
//pop argument 0
@0
D=A
@2
D=D+M
@R13
M=D
@0
M=M-1
A=M
D=M
@R13
A=M
M=D
//C_GOTO MAIN_LOOP_START
@MAIN_LOOP_START
0;JMP
//C_LABEL END_PROGRAM
(END_PROGRAM)
