// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    
    // handling C instruction
    Not(in=instruction[0], out=isCInstruction);
    Register(in=outAMux, load=isCInstruction, out=cInstruction);
    
    
    // handling A instruction
    Mux16(a=outM, b=instruction, sel=instruction[0], out=outAMux);
    Register(in=outAMux, load=instruction[10], out=outAReg, out=addressM);

    // dRegister
    Register(in=outM, load=instruction[11], out=outD);
    
    // second entry in the alu (a register or inM) if it is a c instruction, then use data value as input for alu
    Mux16(a=outAReg, b=inM, sel=isCInstruction, out=outMux);
    
    // PC and reset 
    // the load part and inc should be done according with the jump bits and result from the alu, zr and ng
    // somehow get the jump bits and compare them with zr and ng, 
    // for example 001 jump if out of alu is > 0 ng should be 0 so 0 0 1 and 0 should be 0
    // maybe manipulating zr and ng somehow in order to get all the posibilities and compare them one by one with the jump bits ?? 
        
    Not(in=instruction[13], out=notJ1);
    Not(in=instruction[14], out=notJ2);
    Not(in=instruction[15], out=notJ3);

    //NULL
    And(a=notJ1, b=NotJ2, out=AndNotJ1NotJ2);
    And(a=NotJ3, b=NotJ1J2, out=NullOut)

    //JGT
    And(a=AndNotJ1NotJ2, b=instruction[15], out=JGTOut)

    //JEQ
    And(a=NotJ1, b=NotJ3, out=AndNotJ1NotJ3);
    And(a=AndNotJ1NotJ3, b=instruction[14], out=JEQOut);

    //JGE
    And(a=instruction[14], b=instruction[15], out=AndJ2J3);
    And(a=AndJ2J3, b=notJ1, out=JGEOut);

    //JLT
    And(a=NotJ2, b=NotJ3, out=AndNotJ2NotJ3);
    And(a=AndNotJ2NotJ3, b=instruction[13], out=JLTOut);

    //JNE
    And(a=instruction[13], b=instruction[15], out=AndJ1J3);
    And(a=AndJ1J3, b=NotJ2, out=JNEOut);

    //JLE
    And(a=instruction[13], b=instruction[14], out=AndJ1J2);
    And(a=AndJ1J2, b=NotJ3, out=JLEOut);

    //JMP
    And(a=AndJ1J2, b=instruction[15], out=JumpJMP);
    
    ALU(x=outD, y=outMux, zx=instruction[4], nx=instruction[5], zy=instruction[6], ny=instruction[7], f=instruction[8], no=instruction[9], out=outM, zr=zr, ng=ng);

    Not(in=zr, out=Notzr);
    Not(in=ng, out=Notng);

    // Check if is jump greater
    And(a=Notzr, b=Notng, out=AndNotzrNotng);
    And(a=AndNotzrNotng, b=JGTOut, out=JumpJGT);

    // Check if is jump equals 0
    And(a=Notng, b=zr, out=AndNotngZr);
    And(a=AndNotngZr, b=JEQOut, out=JumpJEQ);

    // Check if is Jump greater or equals
    Or(a=JumpJGT, b=JumpJEQ, out=JumpJGE);

    // Check if is Jump less than zero
    And(a=Notzr, b=ng, out=AndNotzrNg);
    And(a=AndNotzrNg, b=JLTOut, out=JumpJLT);

    // Check if is Jump different than 0
    Or(a=JumpJGT, b=JumpJLT, out=JumpJNE);

    // Check if less or equals
    Or(a=JumpJLT, b=JumpJEQ, out=JumpJLE);
    
    // JMP as well

    // Check if we have one jump condition by OR for everything
    Or(a=JumpJGT, b=JumpJEQ, out=OrJumpJGTJEQ);
    Or(a=JumpJGE, b=JumpJLT, out=OrJumpJGEJLT);
    Or(a=JumpJNE, b=JumpJLE, out=OrJumpJNEJLE);
    
    Or(a=OrJumpJGTJEQ, b=OrJumpJGEJLT, out=OrOrJumpJGTJEQJGEJLT)
    
    Or(a=OrJumpJNEJLE, b=JumpJMP, out=OrOrJumpJNEJLEJMP);

    Or(a=OrOrJumpJGTJEQJGEJLT, b=OrOrJumpJNEJLEJMP, out=load);

    //Add everything to pc
    PC(in=outAReg, load=load, inc=nullOut, reset=reset, out=pc);

    //Instruction[12] should be outM
    And(a=True, b=instruction[12], out=outM);

}